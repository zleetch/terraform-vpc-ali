name: "Terraform-VPC-Ali-Development"

on:
  pull_request:
    branches:
      - "development"
  push:
    branches:
      - "development"

jobs:
  terraform:
    name: "Deploy-Development-Env"
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        
      - name: Terraform format recursive
        id: fmt-recursive
        run: terraform fmt -recursive
      
      - name: Terraform format check
        id: fmt-check
        run: terraform fmt -check

      - name: Terraform init
        id: init
        run: |
          export TF_WORKSPACE="development"
          terraform init -input=false
          terraform workspace show

      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          export TF_WORKSPACE="development"
          terraform plan -input=false -no-color
        continue-on-error: true
      
      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/development' && github.event_name == 'push'
        run: |
          export TF_WORKSPACE="development"
          terraform apply -auto-approve  